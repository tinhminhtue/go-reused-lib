// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: nats/proto/proxy.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProxyLocal_ProxyNats_FullMethodName = "/proxy.ProxyLocal/ProxyNats"
)

// ProxyLocalClient is the client API for ProxyLocal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyLocalClient interface {
	// Sends a greeting
	ProxyNats(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyReply, error)
}

type proxyLocalClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyLocalClient(cc grpc.ClientConnInterface) ProxyLocalClient {
	return &proxyLocalClient{cc}
}

func (c *proxyLocalClient) ProxyNats(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyReply, error) {
	out := new(ProxyReply)
	err := c.cc.Invoke(ctx, ProxyLocal_ProxyNats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyLocalServer is the server API for ProxyLocal service.
// All implementations must embed UnimplementedProxyLocalServer
// for forward compatibility
type ProxyLocalServer interface {
	// Sends a greeting
	ProxyNats(context.Context, *ProxyRequest) (*ProxyReply, error)
	mustEmbedUnimplementedProxyLocalServer()
}

// UnimplementedProxyLocalServer must be embedded to have forward compatible implementations.
type UnimplementedProxyLocalServer struct {
}

func (UnimplementedProxyLocalServer) ProxyNats(context.Context, *ProxyRequest) (*ProxyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyNats not implemented")
}
func (UnimplementedProxyLocalServer) mustEmbedUnimplementedProxyLocalServer() {}

// UnsafeProxyLocalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyLocalServer will
// result in compilation errors.
type UnsafeProxyLocalServer interface {
	mustEmbedUnimplementedProxyLocalServer()
}

func RegisterProxyLocalServer(s grpc.ServiceRegistrar, srv ProxyLocalServer) {
	s.RegisterService(&ProxyLocal_ServiceDesc, srv)
}

func _ProxyLocal_ProxyNats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyLocalServer).ProxyNats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyLocal_ProxyNats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyLocalServer).ProxyNats(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyLocal_ServiceDesc is the grpc.ServiceDesc for ProxyLocal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyLocal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.ProxyLocal",
	HandlerType: (*ProxyLocalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyNats",
			Handler:    _ProxyLocal_ProxyNats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nats/proto/proxy.proto",
}
